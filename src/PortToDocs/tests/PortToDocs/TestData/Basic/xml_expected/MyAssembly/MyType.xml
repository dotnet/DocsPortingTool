<Type Name="MyType" FullName="MyNamespace.MyType">
  <TypeSignature Language="DocId" Value="T:MyNamespace.MyType" />
  <AssemblyInfo>
    <AssemblyName>MyAssembly</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>This is the type summary. It has a reference to <paramref name="param1" />. It contains the word <see langword="null" /> which should be transformed.</summary>
    <param name="param1">This is the first Type param value (like with delegates).</param>
    <param name="param2">This is the second Type param value (like with delegates).</param>
    <typeparam name="T1">This is the first Type typeparam value.</typeparam>
    <typeparam name="T2">This is the second Type typeparam value.</typeparam>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="MyMethod">
      <MemberSignature Language="DocId" Value="M:MyNamespace.MyType.MyMethod" />
      <MemberType>Method</MemberType>
      <Implements />
      <AssemblyInfo>
        <AssemblyName>MyAssembly</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <param name="param1">This is the first Method param value.</param>
        <param name="param2">This is the second Method param value.</param>
        <typeparam name="T1">This is the first Method typeparam.</typeparam>
        <typeparam name="T2">This is the second Method typeparam.</typeparam>
        <summary>This is the method summary. It has a reference to <typeparamref name="T1" />.</summary>
        <returns>This is the return value of MyMethod.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">This is the original text of ArgumentNullException thrown for MyMethod.</exception>
        <exception cref="T:System.IndexOutOfRangeException">This is the original text of IndexOutOfRangeException thrown for MyMethod.</exception>
      </Docs>
    </Member>
    <Member MemberName="MyProperty">
      <MemberSignature Language="DocId" Value="P:MyNamespace.MyType.MyProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>MyAssembly</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the property summary.</summary>
        <value>This is the property value.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add&lt;TValue&gt;">
      <MemberSignature Language="DocId" Value="M:MyNamespace.MyType.MyTypeParamMethod``1(``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>MyAssembly</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TValue" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TValue">The typeparam of MyTypeParamMethod.</typeparam>
        <param name="value">An element of type <typeparamref name="TValue" />.</param>
        <param name="comparer">The equality comparer of type <typeparamref name="TValue" />.</param>
        <summary>The signature of this method would be: <c>public void Add&lt;TValue&gt; (TValue value, System.Collections.Generic.IEqualityComparer&lt;TValue&gt; comparer);</c></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
